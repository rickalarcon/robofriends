{"version":3,"sources":["components/card.js","components/CardList.js","components/SearchBox.js","containers/robots.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","id","name","twitter","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAYeA,EAXF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAGC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,QACtB,OACC,yBAAKC,UAAY,0CAChB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,kBACrB,6BACC,gCAAOC,EAAP,KACA,gCAAOC,EAAP,QCgBWI,EArBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,QAASK,EAAOG,GAAGR,eCGRU,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKX,UAAU,OACf,2BACCA,UAAW,mCACXY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCTAP,EAAS,CACpB,CACEP,GAAI,EACJC,KAAM,OACNiB,SAAU,eACVhB,QAAS,qCAEX,CACEF,GAAI,EACJC,KAAM,QACNiB,SAAU,gBACVhB,QAAS,qCAEX,CACEF,GAAI,EACJC,KAAM,SACNiB,SAAU,YACVhB,QAAS,iCAEX,CACEF,GAAI,EACJC,KAAM,mBACNiB,SAAU,WACVhB,QAAS,6BAEX,CACEF,GAAI,EACJC,KAAM,mBACNiB,SAAU,SACVhB,QAAS,4BAEX,CACEF,GAAI,EACJC,KAAM,uBACNiB,SAAU,mBACVhB,QAAS,4BCxBEiB,EATA,SAACC,GACf,OACC,yBAAKC,MAAS,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCiCKC,G,wDA9Bd,aAAe,IAAD,8BACb,gBAODC,eAAgB,SAACC,GAChB,EAAKC,SAAS,CAAChB,YAAae,EAAME,OAAOC,SAPzC,EAAKC,MAAQ,CACZzB,OAAQA,EACRM,YAAY,IAJA,E,qDAcL,IAAD,OACDoB,EAAiBC,KAAKF,MAAMzB,OAAO4B,QAAO,SAAA5B,GAC/C,OAAOA,EAAON,KAAKmC,cAAcC,SAAS,EAAKL,MAAMnB,YAAYuB,kBAElE,OACE,yBAAKjC,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAcoB,KAAKP,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUpB,OAAQ0B,U,GAxBJK,cCKCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.214a593a.chunk.js","sourcesContent":["import React from 'react';\nconst card = ({id,name,twitter}) => {\n\treturn (\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow'>\t\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}test?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2> { name} </h2>\n\t\t\t\t<p>  { twitter} </p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\nexport default card;\n\n// = background light green + dib + border..  ","import React from 'react';\nimport Card from './card'\nconst CardList = ({robots}) => {\n\n\treturn (\n\t\t<div> \n\t\t{\n\t\t\trobots.map((user,i) => {\n\t\t\treturn (\n\t\t\t\t<Card \n\t\t\t\tkey={i} \n\t\t\t\tid={robots[i].id} \n\t\t\t\tname={robots[i].name} \n\t\t\t\ttwitter={robots[i].twitter}\n\t\t\t\t/> \n\t\t\t);\n\t\t    })\n\t\t}\n\t\t</div>\n\t\t\t);\n\n\n}\nexport default CardList;\n\n\t// for (var i=0; i<length(robots); i++){\n\t// \t\t\t<Card id={robots[i].id} name={robots[i].name} twitter={robots[i].twitter}/> \n\t// \t\t}\n","import React from 'react';\n\nconst SearchBox = ({searchfield,searchChange}) => {\n\treturn(\n\t\t<div className='pa2'>\n\t\t<input \n\t\t\tclassName= 'pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n\n}\n\nexport default SearchBox;","export const robots = [\n  {\n    id: 1,\n    name: 'Rick',\n    username: 'rickalarcon1',\n    twitter: 'https://twitter.com/rick_alarcon1'\n  },\n  {\n    id: 2,\n    name: 'Halim',\n    username: 'haliminfinity',\n    twitter: 'https://twitter.com/haliminfinity'\n  },\n  {\n    id: 3,\n    name: 'Saurav',\n    username: 'satomar42',\n    twitter: 'https://twitter.com/satomar42'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    twitter: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    twitter: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    twitter: 'Karley_Dach@jasper.info'\n  }\n];","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style = {{overflow:'scroll', border:'5px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\n\t);\n};\n\nexport default Scroll;\n\n\n","import React, {Component} from 'react';\nimport CardList from  '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport {robots} from  './robots';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n//to use state you need to create a CLASS\nclass App  extends Component{\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = { \n\t\t\trobots: robots,\n\t\t\tsearchfield:''\n\t\t}\n\t}\n\n\tonSearchChange =(event) => {\n\t\tthis.setState({searchfield: event.target.value})\n\t\t\t}\n\t\t//console.log(event.target.value);\n\t\t//console.log(filteredRobots);\n\n\trender(){\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'> RoboFriend </h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t\t);\n\t}\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\t//adding html attributes like greeting.. \nReactDOM.render(\n\t\t<App/>\n\t,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}